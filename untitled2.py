# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qb1kGPxcmtQ_pbs-T-S0Jg69BSPpL1aN
"""

import os
import json

class Inventario:
    def __init__(self, archivo="inventario.txt"):
        self.archivo = archivo
        self.productos = {}
        self.cargar_inventario()

    def cargar_inventario(self):
        """Carga los productos desde el archivo al iniciar el programa."""
        if not os.path.exists(self.archivo):
            self.guardar_inventario()  # Crea el archivo si no existe
            return
        try:
            with open(self.archivo, "r") as f:
                contenido = f.read()
                self.productos = json.loads(contenido) if contenido else {}
        except (FileNotFoundError, json.JSONDecodeError):
            print("Error al leer el archivo. Puede estar corrupto.")
        except PermissionError:
            print("Error: No se tienen permisos para acceder al archivo.")

    def guardar_inventario(self):
        """Guarda el inventario en un archivo."""
        try:
            with open(self.archivo, "w") as f:
                json.dump(self.productos, f, indent=4)
        except PermissionError:
            print("Error: No se tienen permisos para escribir en el archivo.")

    def agregar_producto(self, nombre, cantidad):
        """Agrega un producto al inventario y lo guarda en el archivo."""
        if nombre in self.productos:
            self.productos[nombre] += cantidad
        else:
            self.productos[nombre] = cantidad
        self.guardar_inventario()
        print(f"Producto '{nombre}' agregado correctamente.")

    def actualizar_producto(self, nombre, cantidad):
        """Actualiza la cantidad de un producto en el inventario."""
        if nombre in self.productos:
            self.productos[nombre] = cantidad
            self.guardar_inventario()
            print(f"Producto '{nombre}' actualizado correctamente.")
        else:
            print("Error: Producto no encontrado en el inventario.")

    def eliminar_producto(self, nombre):
        """Elimina un producto del inventario."""
        if nombre in self.productos:
            del self.productos[nombre]
            self.guardar_inventario()
            print(f"Producto '{nombre}' eliminado correctamente.")
        else:
            print("Error: Producto no encontrado en el inventario.")

    def mostrar_inventario(self):
        """Muestra todos los productos en el inventario."""
        if not self.productos:
            print("El inventario está vacío.")
        else:
            print("Inventario actual:")
            for nombre, cantidad in self.productos.items():
                print(f"- {nombre}: {cantidad}")

if __name__ == "__main__":
    inv = Inventario()
    while True:
        print("\n1. Agregar producto")
        print("2. Actualizar producto")
        print("3. Eliminar producto")
        print("4. Mostrar inventario")
        print("5. Salir")
        opcion = input("Seleccione una opción: ")

        if opcion == "1":
            nombre = input("Ingrese el nombre del producto: ")
            cantidad = int(input("Ingrese la cantidad: "))
            inv.agregar_producto(nombre, cantidad)
        elif opcion == "2":
            nombre = input("Ingrese el nombre del producto a actualizar: ")
            cantidad = int(input("Ingrese la nueva cantidad: "))
            inv.actualizar_producto(nombre, cantidad)
        elif opcion == "3":
            nombre = input("Ingrese el nombre del producto a eliminar: ")
            inv.eliminar_producto(nombre)
        elif opcion == "4":
            inv.mostrar_inventario()
        elif opcion == "5":
            print("Saliendo del programa...")
            break
        else:
            print("Opción no válida. Inténtelo de nuevo.")